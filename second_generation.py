import random
from submit import *
# from march_test18 import *

second_x21 = [[8.9524128557982e-07, -5.2040002839747e-13, -9.943204900671004e-14, 1.7974783598359822e-12, -1.8076177279031027e-11, -3.801529592067615e-16, 4.886660141278987e-18, 3.2524017369387072e-06, -4.0095569058543423e-07, -2.664813930084214e-10, 9.056854074342333e-11, 665200887183.912, 492537232129.24335], [4.6461172152888475e-07, -7.436171913722267e-13, -6.452273920262638e-14, 7.403240283179209e-12, -6.329074065075749e-11, -9.053033405400486e-16, 1.1516825533671881e-17, 2.2620148741057847e-06, -2.7098584145446877e-07, -5.097466972191401e-10, 6.36564901057493e-11, 1007375442563.7281, 766975156270.1067], [8.9524128557982e-07, -6.499681117665445e-13, -9.773737985783409e-14, 1.3649105117875715e-12, -7.189776122346672e-11, -8.539914250317509e-16, 7.605594644365083e-17, 3.2524017369387072e-06, -4.0095569058543423e-07, -2.6808004971683243e-10, 9.056854074342333e-11, 1084932680354.6553, 837662151197.2784], [4.600330817262426e-07, -7.093647550354242e-13, -6.0225552486529e-14, 7.403240283179209e-12, -4.2778533599134575e-11, -3.8061761296199604e-16, 3.4316368450989185e-17, 5.017138636109462e-06, -6.513365528390935e-08, -3.4657430102875284e-09, 8.788537646007788e-12, 1186697135704.393, 947880067648.925], [9.151316279921264e-07, -5.2040002839747e-13, -9.943204900671004e-14, 1.7974783598359822e-12, -1.79043759076148e-11, -3.8061761296199604e-16, 3.4316368450989185e-17, 5.017379055921999e-06, -6.472738510160937e-08, -3.472159298866556e-09, 8.725186505219452e-12, 1188237974265.8042, 948206208577.6549], [6.06878506958054e-07, -7.436171913722267e-13, -6.502613831021622e-14, 3.232122809463217e-12, -2.312708565637413e-11, -9.053033405400486e-16, 2.2922553092503372e-17, 8.683497189542922e-06, -3.42131218802113e-07, -2.263206363640824e-09, 6.313203109434562e-11, 1119211613374.6584, 1066129207721.1375], [4.1988417377622043e-07, -6.499681117665445e-13, -7.211989084369958e-14, 4.315501737620049e-12, -7.61299542612587e-11, -8.539914250317509e-16, 4.886660141278987e-18, 9.860880144736753e-06, -2.2369469730634514e-07, -5.741383869973801e-09, 9.056854074342333e-11, 1139557866057.052, 1085762510013.7631], [4.6461172152888475e-07, -7.154384288635921e-13, -6.0225552486529e-14, 7.382928534775707e-12, -4.2778533599134575e-11, -8.908663925728589e-16, 7.239086570356435e-20, 2.2620148741057847e-06, -2.7075531894600767e-07, -5.120812861007586e-10, 5.067899746018652e-11, 1284951830190.262, 946773037674.6722], [4.6461172152888475e-07, -8.380601383515651e-13, -6.810808047190935e-14, 7.403240283179209e-12, -2.298960380530051e-11, -8.908663925728589e-16, 2.2922553092503372e-17, 8.370821536465599e-06, -2.682922964514429e-07, -5.094768327807372e-10, 4.1386974955586143e-11, 805984216230.4185, 1981851092016.3782], [4.1910746591513436e-07, -7.436171913722267e-13, -6.452273920262638e-14, 5.137395242678137e-12, -7.189776122346672e-11, -9.053033405400486e-16, 7.605594644365083e-17, 9.860880144736753e-06, -2.2401124388590627e-07, -3.3178647884197554e-09, 6.36564901057493e-11, 951942561047.6246, 1854770912888.0396], [9.151316279921264e-07, -6.499681117665445e-13, -7.28181981469547e-14, 1.7974783598359822e-12, -1.7985572337278388e-11, -5.301899536558993e-16, 4.886660141278987e-18, 3.2524017369387072e-06, -6.513365528390935e-08, -3.4867627077038214e-09, 8.788537646007788e-12, 1669467391000.3, 1063567828361.6891], [6.023834823606781e-07, -7.370384546720542e-13, -6.452273920262638e-14, 5.161741619004384e-12, -6.329074065075749e-11, -9.039582863725725e-16, 1.1516825533671881e-17, 8.683497189542922e-06, -1.9312165287601956e-07, -3.3178647884197554e-09, 6.36564901057493e-11, 1056590037158.0016, 1976582068026.6055], [6.046343926878052e-07, -7.47984349476976e-13, -6.468636199768513e-14, 5.183942055494158e-12, -6.29290412449183e-11, -9.092844215013228e-16, 1.1516825533671881e-17, 8.7030515211689e-06, -1.9312165287601956e-07, -3.312454214056635e-09, 6.36564901057493e-11, 1059376947843.8203, 1990739358354.2573], [2.2628460321910647e-07, -8.390184076990835e-13, -6.810808047190935e-14, 3.232122809463217e-12, -2.298960380530051e-11, -6.30668362079067e-16, 2.2922553092503372e-17, 8.370821536465599e-06, -3.42131218802113e-07, -2.263206363640824e-09, 4.1386974955586143e-11, 1638650909554.7224, 1659912101237.4517], [6.021011611297213e-07, -7.436171913722267e-13, -6.496980007828626e-14, 3.232122809463217e-12, -6.329074065075749e-11, -6.30668362079067e-16, 1.1516825533671881e-17, 8.370821536465599e-06, -3.4233094039573823e-07, -2.263206363640824e-09, 4.1386974955586143e-11, 1642056690379.3433, 1664265363910.6362], [2.280056291156765e-07, -8.390184076990835e-13, -6.810808047190935e-14, 3.232122809463217e-12, -2.298960380530051e-11, -6.30668362079067e-16, 2.2890410242027377e-17, 8.365936172699612e-06, -3.42131218802113e-07, -2.263206363640824e-09, 4.127909618882748e-11, 1645159831845.938, 1667903924634.4722], [4.6461172152888475e-07, -7.093647550354242e-13, -6.0225552486529e-14, 7.403240283179209e-12, -4.2778533599134575e-11, -6.30668362079067e-16, 2.3149194938854958e-17, 8.370821536465599e-06, -3.42131218802113e-07, -2.281319920161748e-09, 4.1386974955586143e-11, 1655374120011.7827, 1679784350527.9556], [2.2628460321910647e-07, -9.873458851384566e-13, -9.773737985783409e-14, 1.3602918773791055e-12, -2.302661158571287e-11, -8.539914250317509e-16, 7.583124738408029e-17, 8.378466237972275e-06, -3.42131218802113e-07, -2.263206363640824e-09, 4.1386974955586143e-11, 1972684940537.3281, 1994181786182.9707], [6.046343926878052e-07, -8.455709937324943e-13, -6.452273920262638e-14, 3.232122809463217e-12, -2.280915398642427e-11, -9.053033405400486e-16, 2.294256132117472e-17, 8.683497189542922e-06, -1.9151504411546844e-07, -2.263206363640824e-09, 6.36564901057493e-11, 1459478858366.8237, 3649009823890.9307], [9.151316279921264e-07, -5.2040002839747e-13, -9.773737985783409e-14, 1.797659817349399e-12, -7.189776122346672e-11, -3.8061761296199604e-16, 3.4316368450989185e-17, 9.860880144736753e-06, -2.2572047706800523e-07, -5.741383869973801e-09, 2.7675340822257156e-11, 2693726675578.729, 2935992791182.1724], [2.2628460321910647e-07, -8.390184076990835e-13, -9.943204900671004e-14, 1.7974783598359822e-12, -1.8076177279031027e-11, -6.30668362079067e-16, 2.2922553092503372e-17, 8.312229210657523e-06, -6.513365528390935e-08, -3.472159298866556e-09, 4.1386974955586143e-11, 2039793929312.899, 4564866051316.698], [8.9524128557982e-07, -7.093647550354242e-13, -6.0225552486529e-14, 4.315501737620049e-12, -4.2778533599134575e-11, -5.294967480764472e-16, 7.239086570356435e-20, 2.2577484522237243e-06, -4.0095569058543423e-07, -2.655858658581489e-10, 5.067899746018652e-11, 2909504761266.3535, 3449764845191.0015], [9.187714477800038e-07, -8.390184076990835e-13, -9.943204900671004e-14, 1.7974783598359822e-12, -1.8076177279031027e-11, -3.8061761296199604e-16, 2.2922553092503372e-17, 8.370821536465599e-06, -3.42131218802113e-07, -2.260186128897612e-09, 8.788537646007788e-12, 2989643058829.506, 3742081574269.1265], [8.9524128557982e-07, -7.093647550354242e-13, -6.0225552486529e-14, 4.315501737620049e-12, -4.2607226612456245e-11, -8.908663925728589e-16, 4.886660141278987e-18, 3.2524017369387072e-06, -4.0095569058543423e-07, -5.086874947777596e-10, 5.067899746018652e-11, 3393670872496.375, 3912442089234.5186], [4.1910746591513436e-07, -9.81114070996047e-13, -9.851511023645296e-14, 1.3649105117875715e-12, -7.196996094874699e-11, -8.539914250317509e-16, 7.605594644365083e-17, 9.860880144736753e-06, -2.2572047706800523e-07, -5.741383869973801e-09, 2.742141552159081e-11, 3648902251872.286, 3989245936839.655], [4.1910746591513436e-07, -9.81114070996047e-13, -9.773737985783409e-14, 5.137395242678137e-12, -6.329074065075749e-11, -9.053033405400486e-16, 1.1516825533671881e-17, 8.683497189542922e-06, -2.2572047706800523e-07, -5.741383869973801e-09, 2.742141552159081e-11, 4555642582857.237, 5208135698115.261], [2.2628460321910647e-07, -5.2040002839747e-13, -9.943204900671004e-14, 1.7974783598359822e-12, -2.298960380530051e-11, -3.811437817216905e-16, 2.2922553092503372e-17, 5.017138636109462e-06, -3.42131218802113e-07, -2.263206363640824e-09, 8.788537646007788e-12, 5361733470498.467, 7433581505037.989], [4.6784086458030073e-07, -9.835114683766596e-13, -6.0225552486529e-14, 1.3649105117875715e-12, -4.2778533599134575e-11, -8.539914250317509e-16, 7.239086570356435e-20, 2.2620148741057847e-06, -2.2572047706800523e-07, -5.741383869973801e-09, 5.067899746018652e-11, 7736112770774.908, 9783125962605.754], [9.151316279921264e-07, -5.2040002839747e-13, -6.810808047190935e-14, 3.219988819185113e-12, -2.298960380530051e-11, -3.7789728191403894e-16, 2.2922553092503372e-17, 5.017138636109462e-06, -3.42131218802113e-07, -3.472159298866556e-09, 8.788537646007788e-12, 7994708606309.021, 11783068094004.066], [9.151316279921264e-07, -5.2040002839747e-13, -9.773737985783409e-14, 1.7914037366867019e-12, -7.189776122346672e-11, -8.539914250317509e-16, 3.4316368450989185e-17, 5.017138636109462e-06, -2.2572047706800523e-07, -5.741383869973801e-09, 8.788537646007788e-12, 9633654218304.701, 13230709071754.98]]

# parent_generation = fourth_x18
# next_generation = "fifth_x18"
from march_test20 import *
from proof_scam2 import *

parent_generation = tenth_x21
next_generation = "eighth_x21"
pre_mutationarr=[]
single_arr=[0]*11
SECRET_KEY='H6geON26Ve5GxQDO1CDzkff4ZOn2kHEPV0DMMnfm6OEWfIBQ1I'

def cross_over(parent1, parent2):
    
    child=[]
    cnt1=0
    cnt2=0
    unmutated_child=[]

    for i in range(11):

        a=random.randint(0,1)

        if a and cnt1<5:
            child.append(parent1[i])
            cnt1=cnt1+1

        elif cnt2<5:
            child.append(parent2[i])
            cnt2=cnt2+1

        else:
            child.append(parent1[i])
            cnt1=cnt1+1
        unmutated_child.append(child[i])
        chance=random.uniform(1,100)

        if chance<=80:
            ch = random.uniform(-0.3,0.3)
            child[i]=child[i]*(1+ch)
            if child[i]==0:
                child[i]=random.uniform(-1e-5,1e-5)
    pre_mutationarr.append(unmutated_child)
    return child
        
def get_score(vector):
    score=get_errors(SECRET_KEY, vector)
    vector.append(score[0])
    vector.append(score[1])
    return vector
    
def create_next_gen(population):
    return_population=[]
    for i in range(30):
        par1 = random.randint(0, 5)
        par2=random.randint(0,5)
        ch=cross_over(population[par1], population[par2])
        ch=get_score(ch)
        return_population.append(ch)
    #sort
    return return_population


for i in range(len(parent_generation)):
    for j in range(len(parent_generation)):
        if 0.7*parent_generation[i][11]+parent_generation[i][12] > 0.7*parent_generation[j][11]+parent_generation[j][12] and i<j:
            xd = parent_generation[i]
            parent_generation[i] = parent_generation[j]
            parent_generation[j] = xd

parent_for_breeding=[]
for i in (parent_generation):
    if (i[11]<=i[12] and 5*i[11]>=i[12]) or (i[12]<=i[11] and 5*i[12]>=i[11]):
        parent_for_breeding.append(i)

parent_generation=parent_for_breeding

child_generation=create_next_gen(parent_generation)

for i in range(len(child_generation)):
    for j in range(len(child_generation)):
        if 0.7*child_generation[i][12]+child_generation[i][11] > 0.7*child_generation[j][12]+child_generation[j][11] and i<j:
            xd = child_generation[i]
            child_generation[i] = child_generation[j]
            child_generation[j] = xd
            xd = pre_mutationarr[i]
            pre_mutationarr[i] = pre_mutationarr[j]
            pre_mutationarr[j] = xd

print("unmodulated_"+next_generation,"=",pre_mutationarr)
print(next_generation,"=",child_generation)
